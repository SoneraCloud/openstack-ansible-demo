---
# Demo using Ansible to create and configure a virtual machine on OpenStack clouds.
#
# You'll need to download and source your credentials before this will work
- name: Create and configure demo VM
  hosts: ansible-demo # Hostname that ansible connects to
  remote_user: centos # Linux user in the CentOS images
  gather_facts: false # Disable running setup module which will fail before VM exists

  vars:
    # These will vary from cloud to cloud
    demo_image: centos-7
    demo_flavor: sonera.linux.tiny
    # These don't need changing
    your_name: "{{ lookup('env', 'USERNAME') }}"
    demo_key: "{{your_name}}"
    demo_sg: demo-sg-{{your_name}}
    demo_security_groups: default,{{ demo_sg }} # don't add spaces here!
    demo_net_name: "{{ lookup('env', 'OS_PROJECT_NAME') }}-net"
    demo_greeting: "Hello from OpenStack!"

  tasks:
    - name: Gather facts from localhost for the initial part of the playbook
      setup:
      delegate_to: localhost

    - name: Create security group
      os_security_group:
        name: "{{ demo_sg }}"
      delegate_to: localhost

    - name: Add rule to security group to allow http from the internet
      os_security_group_rule:
        security_group: "{{ demo_sg }}"
        protocol: tcp
        port_range_min: 80
        port_range_max: 80
        remote_ip_prefix: 0.0.0.0/0
      delegate_to: localhost

    - name: Add rule to security group to ssh from current system
      os_security_group_rule:
        security_group: "{{ demo_sg }}"
        protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: "{{ ansible_default_ipv4.address }}/32"
      delegate_to: localhost

    - name: Create a virtual machine
      register: result
      os_server:
        name: ansible-demo-{{ your_name }}
        image: "{{ demo_image }}"
        flavor: "{{ demo_flavor }}"
        key_name: "{{ demo_key }}"
        security_groups: "{{ demo_security_groups }}"
        auto_ip: yes
        reuse_ips: yes
        nics:
          - net-name: "{{ demo_net_name }}"
      delegate_to: localhost

# Floating IP allocation is reliable, but the allocated IP is ofen missing from
# the results. Find it using the CLI tools
    - name: Find the floating IP address (work around nova issue)
      command: openstack ip floating list -f value -c "Fixed IP Address" -c "Floating IP Address"
      register: floatingiplines
      changed_when: false
      delegate_to: localhost

    - name: Set inventory_hostname to the new floating IP address
      set_fact: ansible_host={{ item | regex_replace('(.*) (.*)', '\\1') }}
      with_items: '{{ floatingiplines.stdout_lines }}'
      when: "item | search('{{ result.openstack.networks.values()[0][0] }}')"
      delegate_to: localhost

# This is the simpler way to get the floating IP, but it isn't reliable
#    - name: Set inventory_hostname to the new floating IP address
#      set_fact: ansible_host="{{ result.openstack.networks.values()[0][1] }}"

    - name: clear ssh known_hosts
      known_hosts: name={{ ansible_host }} state=absent
      when: result | changed
      ignore_errors: true # This non-essential task tends to fail
      delegate_to: localhost

    - name: Wait for instance to be ready
      wait_for: host={{ ansible_host }} port=22 search_regex=OpenSSH delay=10
      delegate_to: localhost
    - pause:
        seconds: 30
      when: result | changed

# Now the Virtual machine is working we configure a simple webserver

    - name: Re-run setup against the new vm
      setup:

    - name: Install a webserver
      yum: name=httpd state=present
      become: yes  # sudo to root

    - name: Deploy demo web page
      template: src=templates/demo.html.j2 dest=/var/www/html/index.html owner=apache group=apache mode=0644
      become: yes  # sudo to root

    - name: Install firewalld
      yum: name=firewalld state=present
      become: yes  # sudo to root

    - name: Start firewalld
      service: name=firewalld state=started enabled=yes
      become: yes  # sudo to root
      register: firewall_started

    - pause:
        seconds: 30
      when: firewall_started | changed

    - name: Configure firewalld for ssh
      firewalld: service=ssh permanent=true state=enabled
      become: yes  # sudo to root
      notify:
        - restart firewalld

    - name: Configure firewalld for http
      firewalld: service=http permanent=true state=enabled
      become: yes  # sudo to root
      notify:
        - restart firewalld

    - name: Start apache
      service: name=httpd state=started enabled=yes
      become: yes  # sudo to root

    - name: The webserver is configured
      debug:
        msg: "http://{{ ansible_host }}/"

  handlers:
    - name: restart firewalld
      become: yes  # sudo to root
      service: name=firewalld state=restarted
